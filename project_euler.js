let buttons = document.getElementsByClassName('answer-button')
let answerContainers = document.getElementsByClassName("answer-container")
const loader = document.getElementById(`loader`)

const checkShouldRun = (problemNumber) => {
    const button = document.getElementById(`answer-button-${problemNumber}`)
    if(button.innerText === 'Run') return true
    return false
}

const displayLoader = (problemNumber) => {
    console.log('in dispaly loader')
    const questionContainer = document.getElementById(`questionContainer${problemNumber}`)
    console.log(questionContainer)
    const button = document.getElementById(`answer-button-${problemNumber}`)
    button.parentNode.removeChild(button)

    let clonedLoader = loader.cloneNode(true)
    clonedLoader.id = `loader${problemNumber}`
    questionContainer.appendChild(clonedLoader)
    
    console.log('end display loader')
}

//  JS for HTML Interactions
const showAnswerBox = (problemNumber, result, runTimeMs) => {
    let answerContainer = document.getElementById(`answer-container-${problemNumber}`)
    let answerText = document.createElement('h5')
    answerText.className = 'answer-box-text'
    answerText.textContent = 'Result: ' + result
    let runtimeText = document.createElement('h5')
    runtimeText.className = 'answer-box-text'
    runtimeText.textContent = 'Milliseconds: ' + runTimeMs
    answerContainer.appendChild(answerText)
    answerContainer.appendChild(runtimeText)
    answerContainer.className = `answer-showing`

    const questionContainer = document.getElementById(`questionContainer${problemNumber}`)
    const loader = document.getElementById(`loader${problemNumber}`)
    loader.parentNode.removeChild(loader)
    let hideAnswerButton = document.createElement('button')
    hideAnswerButton.innerText = 'Hide Answer'
    hideAnswerButton.id = `answer-button-${problemNumber}`
    hideAnswerButton.className = 'answer-button'
    hideAnswerButton.addEventListener('click', eval('problem'+problemNumber) )
    questionContainer.appendChild(hideAnswerButton)
}

//  JS for HTML Interactions
const hideAnswerBox = (problemNumber) => {
    let answerContainer = document.getElementById(`answer-container-${problemNumber}`);
    while (answerContainer.firstChild) {
        answerContainer.removeChild(answerContainer.firstChild);
    }
    answerContainer.className = `answer-hidden`
    document.getElementById(`answer-button-${problemNumber}`).innerText = `Run`
}



////////////////////////////////////////////
//               Problem 1:               //
//          Multiples of 3 and 5          //
////////////////////////////////////////////

// If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
// Find the sum of all the multiples of 3 or 5 below 1000.

function problem1(){
    //! Display the DOM Renders
    const problemNumber = 1
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let numbersArr = []
    for (let i = 0; i < 1000; i++){
        if(i % 5 === 0) numbersArr.push(i)
        if(i % 3 === 0) numbersArr.push(i)
    }
    const result = numbersArr.reduce((total, number) => total + number)

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-1').addEventListener('click', problem1)




////////////////////////////////////////////
//              Problem 2:                //
//        Even Fibonacci numbers          // 
////////////////////////////////////////////

//  Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

//////////////////////////////////////////////////////////////////////////////

function problem2(){
    //! Display the DOM Renders
    const problemNumber = 2
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let fibArr = [1, 2]
    let result = 0

    while(fibArr[fibArr.length - 1] < 4000000){
        let lastNumber = fibArr[fibArr.length - 1]
        let secondToLastNumber = fibArr[fibArr.length - 2]
        let nextNumber = lastNumber + secondToLastNumber
        fibArr.push(nextNumber)
            if(nextNumber % 2 === 0 ){
                result += nextNumber
            } 
    }

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-2').addEventListener('click', problem2)




////////////////////////////////////////////
//              Problem 3:                //
//         Largest prime factor           // 
////////////////////////////////////////////

//  The prime factors of 13195 are 5, 7, 13 and 29.

//  What is the largest prime factor of the number 600851475143 ?

function problem3(){
    //! Display the DOM Renders
    const problemNumber = 3
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let num = 600851475143
    let primeFactors = [];

    while (num % 2 === 0) {
        primeFactors.push(2);
        num = num / 2;
    }
    
    let sqrtNum = Math.sqrt(num);

    for (let i = 3; i <= sqrtNum; i++) {
        while (num % i === 0) {
            primeFactors.push(i);
            num = num / i;
        }
    }

    if (num > 2) primeFactors.push(num)
    let result = primeFactors.pop()

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-3').addEventListener('click', problem3)







////////////////////////////////////////////
//              Problem 4:                //
//     Largest palindrome product         // 
////////////////////////////////////////////

//  A palindromic number reads the same both ways. 
//  The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

//  Find the largest palindrome made from the product of two 3-digit numbers.

function problem4(){
    //! Display the DOM Renders
    const problemNumber = 4
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let largestProduct = {
        num1 : 0,
        num2 : 0,
        product: 0
    }

    for(let i = 999; i > 99; i--){
        for(let j = 999; j > 99; j--){
            let product = i * j
            let productString = product.toString()
            let reversedProduct = product.toString().split("").reverse().join("")
            if(productString === reversedProduct && product > largestProduct.product){
                largestProduct = {
                    num1: i,
                    num2: j,
                    product: product
                }
            }
        }
    }
    result = largestProduct.product

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-4').addEventListener('click', problem4)





////////////////////////////////////////////
//              Problem 5:                //
//          Smallest multiple             // 
////////////////////////////////////////////

// 2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

// What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?

function problem5(){
    //! Display the DOM Renders
    const problemNumber = 5
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let numberFound = false
    let increment = 20;
    let result = 0
    while(!numberFound){
        increment +=20
        if (increment % 19 === 0 && increment % 18 === 0 && increment % 17 === 0 && increment % 16 === 0 && increment % 15 === 0 &&     increment % 14 === 0 && increment % 13 === 0 && increment % 12 === 0  && increment % 11 === 0 ){
            result = increment
            numberFound = true
        }
    }

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-5').addEventListener('click', problem5)





////////////////////////////////////////////
//              Problem 6:                //
//        Sum square difference           // 
////////////////////////////////////////////

// The sum of the squares of the first ten natural numbers is:
// 1^2 + 2^2 + ... + 10^2 = 385

// The square of the sum of the first ten natural numbers is:
// (1 + 2 + ... + 10)^2 = 55^2 = 3025
// Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

// Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.

function problem6(){
    //! Configures the DOM Renders
    const problemNumber = 6
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let sumOfSquares = 0
    let sums = 0

    for(let i = 1; i < 101; i++){
        sumOfSquares += i*i
        sums += i
    }
    let squareOfSums = sums * sums
    let result = squareOfSums - sumOfSquares
    
    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-6').addEventListener('click', problem6)






////////////////////////////////////////////
//              Problem 7:                //
//            10001st prime               // 
////////////////////////////////////////////

// By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

// What is the 10001st prime number?

function problem7(){
    //! Configures the DOM Renders
    const problemNumber = 7
    // let shouldRun = checkShouldRun(problemNumber)
    // if(!shouldRun) return hideAnswerBox(problemNumber)
    // displayLoader(problemNumber)
    let answerContainer = document.getElementById(`answer-container-${problemNumber}`)
    let localLoader = document.getElementById(`loader${problemNumber}`)
    localLoader.class = 'loader-hidden'
    // let clonedLoader = loader.cloneNode(true)
    // clonedLoader.id = `loader${problemNumber}`
    // answerContainer.appendChild(loader)
    // console.log(answerContainer)

    //! Solution Code
    console.log('runnig solution')
    const startTime = performance.now()
    let primeNumbersArray = []

    let num = 2
    while(primeNumbersArray.length < 10000){
        num++
        let checkingNumber = true
        let increment = 2
        while(checkingNumber){
            if (num === increment){
                // number is prime
                primeNumbersArray.push(num)
                checkingNumber = false
            } else if (num % increment === 0){
                // number is not prime and break the checks
                checkingNumber = false
            }
            increment++
        }
    }
    let result = primeNumbersArray.pop()

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-7').addEventListener('click', problem7)





    ////////////////////////////////////////////
//              Problem 8:                //
//      Largest product in a series       // 
////////////////////////////////////////////

// The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

/*
73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450
*/

// Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

function problem8(){
    //! Configures the DOM Renders
    const problemNumber = 8
    let shouldRun = checkShouldRun(problemNumber)
    if(!shouldRun) return hideAnswerBox(problemNumber)
    displayLoader(problemNumber)

    //! Solution Code
    const startTime = performance.now()
    let num = '7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    let newNum = num.split('')

    let largestProduct = 0
    let currentProduct = 0

    //  This solution takes an average of < 2 ms :
    for(let i = 0; i < newNum.length- 13; i++){
        currentProduct = parseInt(newNum[i]) * parseInt(newNum[i+1]) *parseInt(newNum[i+2]) *parseInt(newNum[i+3]) *parseInt(newNum[i+4]) *parseInt(newNum[i+5]) *parseInt(newNum[i+6]) *parseInt(newNum[i+7]) *parseInt(newNum[i+8]) *parseInt(newNum[i+9]) *parseInt(newNum[i+10]) *parseInt(newNum[i+11]) *parseInt(newNum[i+12]) 
        
        currentProduct > largestProduct ? largestProduct = currentProduct : largestProduct = largestProduct
    }
    //  This alternatesolution takes an average of 7 ms :
    // for(let i = 0; i < num.length; i++){
    //     const nums = [...num.slice(i, i + 12)]
    //     const sum = nums.reduce((final, num) => final * parseInt(num), 1)
    //     if(sum > largestProduct){
    //         largestProduct = sum
    //     }
    // }
    const result = largestProduct

    //! Sets Solution on DOM
    const runTimeMs = (performance.now() - startTime).toFixed(4)
    showAnswerBox(problemNumber, result, runTimeMs)
}
document.getElementById('answer-button-8').addEventListener('click', problem8)
